{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","onBlur","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","className","EditableSpan","editMode","setEditMode","variant","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId","todolistTasks","setTasks","task","v1","todolist","todolists","find","tl","setTodolists","changeStatus","newTitle","todolistId1","todolistId2","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodolistId","spacing","allTodolistTasks","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.57f36e37.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div onBlur={() => {\r\n        setError(null);\r\n        setTitle('');\r\n    }}>\r\n        {/*<input value={title}*/}\r\n        {/*       onChange={onChangeHandler}*/}\r\n        {/*       onKeyPress={onKeyPressHandler}*/}\r\n        {/*       className={error ? \"error\" : \"\"}*/}\r\n        {/*/>*/}\r\n        {/*{меняем инпут}*/}\r\n        <TextField value={title} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label='Hello'\r\n                   helperText={error}\r\n\r\n        />\r\n        {/*<Button variant={'contained'} color={'primary'} onClick={addItem}>+</Button>*/}\r\n        <IconButton color={'primary'} onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?\r\n        <TextField variant=\"filled\" value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {ButtonGroup, Checkbox, IconButton,} from '@material-ui/core';\r\nimport {Button} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            {/*<button onClick={removeTodolist}>x</button>*/}\r\n            {/*{Поменяли кнопку вместо обычной на компаненту из  }*/}\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        {/*<input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>*/}\r\n                        {/*{Меняем checkbox}*/}\r\n                        <Checkbox onChange={onChangeHandler} checked={t.isDone} color={'secondary'}/>\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        {/*<button onClick={onClickHandler}>x</button>*/}\r\n                        {/*{Поменяли кнопку вместо обычной на компаненту из  }*/}\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'outlined'} color={'default'}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color={'primary'}\r\n                    variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={'secondary'}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {Grid, Toolbar, AppBar, Button, IconButton, Typography, Container, Paper} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n\r\n    // @ts-ignore\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Material-UI</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '40px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n\r\n\r\n                <Grid container spacing={3}>{\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                        }\r\n\r\n                        return <Grid item  key={tl.id}>\r\n                           <Paper style={{padding:\"20px\"}} >\r\n                               <Todolist\r\n                                   id={tl.id}\r\n                                   title={tl.title}\r\n                                   tasks={tasksForTodolist}\r\n                                   removeTask={removeTask}\r\n                                   changeFilter={changeFilter}\r\n                                   addTask={addTask}\r\n                                   changeTaskStatus={changeStatus}\r\n                                   filter={tl.filter}\r\n                                   removeTodolist={removeTodolist}\r\n                                   changeTaskTitle={changeTaskTitle}\r\n                                   changeTodolistTitle={changeTodolistTitle}\r\n                               />\r\n                           </Paper>\r\n                        </Grid>\r\n\r\n                    })\r\n                }</Grid>\r\n\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}